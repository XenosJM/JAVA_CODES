package edu.java.codeup;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

//		출석 번호를 n번 무작위로 불렀을 때, 각 번호(1 ~ 23)가 불린 횟수를 각각 출력해보자.
//		첫 번째 줄에 출석 번호를 부른 횟수인 정수 n이 입력된다. (1 ~ 10000)
//		두 번째 줄에는 무작위로 부른 n개의 번호(1 ~ 23)가 공백을 두고 순서대로 입력된다.
//		1번부터 번호가 불린 횟수를 순서대로 공백으로 구분하여 한 줄로 출력한다

		// 1. 출석 번호는 1 ~ 23번 까지 있다. <- 제일 먼저 만들어져야함
		// 2. 출석 번호는 '무작위'로 불린다.
		// 3. 무작위 로 불린 n개의 번호가 공백을 두고 입력되고 <- 두번째로 실행되어야한다.
		// 4. 1번부터 23번까지 불린 횟수를 불린횟수 배열에 저장한다. <- 세 번째로 실행
		// 5. 1번부터 23번까지 불린횟수를 공백으로 구분하여 출력한다.<- 마지막으로 실행


		int[] a = new int[23];
		int n = sc.nextInt();
		for (int i = 1; i <= n; i++) { // <- n개의 번호가 무작위로 불림과 동시에 기록을 시킨다.
			double rX = Math.random(); // random() : 0 <= x < 1 사이의 난수 발생
			int x = (int) (23 * rX + 1);
			a[x - 1] += 1;
			System.out.print(x + " ");
			// 현재 난수값이 23이 되면 오류가 뜬다.
			// 찾은 이유 배열은 index 0부터 22까지 23개를 저장하므로 x-1을 해주어
			// 23이떠도 22로 저장이 될수있게 해서 해결
		}
		System.out.println();
		for (int result : a) {
			System.out.print(result + " ");
		}

		// =================================== 아래는 바꾸기 전 코드
		
//int [] a = new int[23]; 
//for(int i = 0; i < a.length; i++) { // 내 의도 : 설정된 att.length 값 까지 아래 식을 실행해 배열에 값을 저장 
//                                          ㄴ 어차피 a배열의 값은 기본적으로 0으로 초기화 되기떄문에 for문을 만들 필요가없다..
//	a[i] = i+1; 					<- 어차피 a배열은 굳이 값이 있을필요가 없고 나중에 난수의 횟수만을 저장하는 기능을 하면 되기떄문에 필요가없다.
//	System.out.println(a[i]);
//} int n = sc.nextInt();
//	for(int i1 = 1; i1 <= n; i1++) { // 내 의도 : 입력된 n 값 만큼 1~23까지의 난수를 n번 발생 
//		if(i1 <= n) { // i1값이 n보다 작거나 같을때까지 1~23 사이의 난수 생성 <- 이미 위 for문의 조건과 같기때문에 의미없는 if문이다.
//			int [] a1 = new int[23];  <- 얘는 애초에 a 배열에만 저장하면 되는 일이었기때문에 이 a1배열은 쓰일일도 만들필요도 없었다.
//			double rX = Math.random(); // random() : 0 <= x < 1 사이의 난수 발생
//			int x = (int) (23 * rX + 1);
//			System.out.println(x);
//			System.out.println();
//	}
//}


		
		
		
		// 1. 선택화면 출력한다.
		// 2. 선택화면 출력을 반복한다.
		//  ㄴ 종료를 선택하면 출력이 종료된다.
		// 3. 사용자가 선택할 수 있도록 변수 선언
		// ㄴ 변수의 타입 : 숫자
		// ㄴ 선택지 개수 : 4개
		
//		System.out.println("JAVA 은행");
//		System.out.println("---------------------");
//		
		
		
	
		
		
		
//		int a = sc.nextInt();
//        int b = sc.nextInt();
//        int c = 0;
//        1 <= a,b <10000
//        연산 ⊕는 두 정수에 대한 연산으로 두 정수를 붙여서 쓴 값을 반환합니다. 예를 들면 다음과 같습니다.
//      
//              12 ⊕ 3 = 123
//          	3 ⊕ 12 = 312
//              양의 정수 a와 b가 주어졌을 때, a ⊕ b와 2 * a * b 중 더 큰 값을 return하는 solution 함수를 완성해 주세요.
//              단, a ⊕ b와 2 * a * b가 같으면 a ⊕ b를 return 합니다.
//		
//        String s = a +""+ b;
//        int c = 0;
//			if(c!=0) {
//				c = b/10;
//				c++;
//				System.out.println(c);
//			}
//			
		// 구구단을 *로 출력을 하자
		// 그러기 위해선 우선 구구단을 출력해야한다.
		// 1. 구구단을 출력한다.
		// 2. 입력한 숫자단의 구구단을 출력하게 한다. 예) 2를 입력하면 2단만 출력되게
		// 3. 출력된 구구단의 값을 "*"로 변환한다. 
		// 4. 출력된 구구단의 답만큼 *갯수가 늘어나게 출력한다. 예) 2*1 = ** 2*2 = ****
						
//		int n = sc.nextInt();
//				
//	
//			for(int j = 1; j<=9;j++) {
//				 for (int k = 0; k < n*j; k++) {
//                    System.out.print("*");
//				}
//				System.out.println();
//			}				


		// 구구단을 *로 출력을 하자
		// 그러기 위해선 우선 구구단을 출력해야한다.
		// 1. 구구단을 출력한다.
		// 2. 입력한 숫자단의 구구단을 출력하게 한다. 예) 2를 입력하면 2단만 출력되게
		// 3. 출력된 구구단의 값을 "*"로 변환한다. 
		// 4. 출력된 구구단의 답만큼 *갯수가 늘어나게 출력한다. 예) 2*1 = ** 2*2 = ****
						

//
//		int n = sc.nextInt();
//
//		for(n = 2; n<=9; n++) {
//		for(int j = 1; j<=9;j++) {
//		 	for (int k = 0; k < n*j; k++) {
//            System.out.print("*");
//			}
//			System.out.println();
//			}
//			break;
//		}		
//	} // end main()
//} // end Main

//		int n = sc.nextInt();
//				
//		for(int i = 2; i<=9; i++) {
//			for(int j = 1; j<=9;j++) {
//				int m = i*j;
//				if (i == n) {				
//				} for (int k = 0; k < m; k++) {
//                    System.out.print("*");
//				}
//				System.out.println();
//			}
//			break;
//		}		
//	} // end main()
//} // end Main

//					System.out.println(i + " X " + j + " = " + m);					

//구글 입사 시험으로 1 ~ 1,000,000까지 1의 개수를 묻는 문제가 나온적이 있다.
//
//우리는 이 문제를 풀기에는 아직 힘이 든다.
//
//우리는 이 문제를 조금 쉽게 바꾸어 풀려고한다.
//
//어떤 수 n이 주어지면 1부터 n까지의 수 중 맨 마지막 자리에 1이 몇 번 들어 있는지 알아내는 프로그램을 작성하시오.		

//		int n = sc.nextInt(); // 어떤 숫자 n
//		int Count = 0;
//		int i =0;
//		
//		for (i = 1; i<=n; i++) {
//			if(i%10 == 1) {
//				Count++;
//			}
//		}
//		    System.out.println(Count);

// =======================================================

//어떤 규칙에 따라 수를 순서대로 나열한 것을 수열(series)이라고 한다.
//
//예를 들어
//1 4 7 10 13 16 19 22 25 ... 은
//1부터 시작해 이전에 만든 수에 3을 더해 다음 수를 만든 수열이다.
//이러한 것을 수학에서는 앞뒤 수들의 차이가 같다고 하여
//
//등차(차이가 같다의 한문 말) 수열이라고 한다.
//수열을 알게 된 영일이는 갑자기 궁금해졌다.
//
//"그럼.... 123번째 나오는 수는 뭘까?"
//
//영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.
//
//시작 값(a), 등차(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때
//n번째 수를 출력하는 프로그램을 만들어보자.
//
//시작 값(a), 등차의 값(d), 몇 번째 수 인지를 의미하는 정수(n)가
//공백을 두고 입력된다.(모두 0 ~ 100)

//	int i = sc.nextInt();
//	int d = sc.nextInt();
//	int n = sc.nextInt();
//	int sum = i +(n-1)*d;
//	for(i=0;i<=n;i++) {
//	}System.out.println((sum));

// ============================================================		

//1부터 입력한 정수까지 1씩 증가시켜 출력하는 프로그램을 작성하되,
//3의 배수인 경우는 출력하지 않도록 만들어보자.
//
//예를 들면,
//1 2 4 5 7 8 10 11 13 14 ...
//와 같이 출력하는 것이다.
//참고
//반복문 안에서 continue;가 실행되면 그 아래의 내용을 건너뛰고, 다음 반복을 수행한다.
//즉, 다음 반복으로 넘어가는 것이다.
//예시
//for(i=1; i<=n; i++) //1부터 시작해 n까지 1씩 증가시키면서 반복한다.
//{
//  if(i%2==0)
//    continue; //짝수라면? 아래 부분은 건너뛰고! 계속~
//  printf("%d ", i); //결국 짝수가 아닐 때에만 출력된다.
//}

//		
//		for (int i = 1; i <= n; i++) {
//			if(i%3==0) {
//				continue;
//			}
//			System.out.print(i + " ");
//		}
//		
//

// ====================================================

// =================================================================
//for(int i= 2; i<=n; i++) {
//	for(int j=1; j<=9;j++) {
//		int m = i*j;
//		System.out.println(i + " X " + j + " = " + m);
//	}			
//}

//	==================================================================

//		5개의 정수들의 최댓값과 최솟값을 구하는 프로그램을 작성하라.

////		5개의 정수만 입력하면 되기때문에 굳이 n값을 만들어서 5의 자리에 넣을 필요는 없으므로 n값을 없애도 된다.
////		int n = sc.nextInt()
//		int max = -1000000;
//		int min = 1000000;
//		for(int i = 0; i < 5; i++) {
//			int a = sc.nextInt();
//			if (a > max) {
//				max = a;
//			} if (a < min) {
//				min = a;
//			}
//		}
//		System.out.println(max + "\n" + min);

// ==================================================================

//		어떤 숫자가 입력되면 그 숫자가 몇 자릿수 숫자인지 알아내는 프로그램을 작성하시오.
//
//		예)
//
//		7   ----> 1   (1자릿수)
//
//		10  ----> 2   (2자릿수)
//
//		4322 ----> 4   (4자릿수)
//		
//		1이상의 자연수 n이 입력된다. (n은 int 범위)
//		
//		int n = sc.nextInt(); // 어떤 숫자 n
//		int Count = 0;
//		
//		while (n != 0) {
//		    n = n / 10;
//		    Count++;
//		}
//		System.out.println(Count);

//		

//// ============================================== 강사님 풀이
////		입력의 개수 n이 입력되고 n개의  데이터가 입력된다.
//////
//////		이 n개의 데이터 중 최댓값을 출력한다.
////		
//		int n = sc.nextInt();
//		
//		int max = 0;
//		for(int i = 0; i < n; i++) {
//			int a = sc.nextInt();
//			if (a > max) {
//				max = a;
//			}
//		}
//		System.out.println(max);
////		

//==============================================

//	
//		
//		int n = sc.nextInt();
//		int count = 0;
//		for(int i = 1; i <= n; i++) {
//			if(i % 10 == 1) {
//				count++;
//			}
//		}
//		System.out.println(count);

//==============================================

//구글 입사 시험으로 1 ~ 1,000,000까지 1의 개수를 묻는 문제가 나온적이 있다.
//
//우리는 이 문제를 풀기에는 아직 힘이 든다.
//
//우리는 이 문제를 조금 쉽게 바꾸어 풀려고한다.
//
//어떤 수 n이 주어지면 1부터 n까지의 수 중 맨 마지막 자리에 1이 몇 번 들어 있는지 알아내는 프로그램을 작성하시오.

// 강사님이 반복되는 공식을 알아낸 방법 아래서 반복되는 수식을 코드화한다.
// 123451 % 10 = 1, 123456 / 10 = 12345
// 12345 % 10 = 5, 12345 / 10 = 1234
// 1234 % 10 = 4, 1234 / 10 = 123
// 123 % 10 = 3, 123 / 10 = 12
// 12 % 10 = 2, 12 / 10 = 1
// 1 % 10 = 1, 1 / 10 = 0
// 0?
// 코드로 바꾸는 퀴즈

//예를 들어
//1 -1 3 -5 11 -21 43 ... 은
//1부터 시작해 이전에 만든 수에 -2를 곱한 다음 1을 더해 다음 수를 만든 수열이다.
//
//이런 이상한 수열을 알게 된 영일이는 또 궁금해졌다.
//
//"그럼.... 13번째 나오는 수는 뭘까?"
//
//영일이는 물론 수학을 아주 잘하지만 이런 문제는 본 적이 거의 없었다...
//
//그래서 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.
//
//
//시작 값(a), 곱할 값(m), 더할 값(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때,
//n번째 수를 출력하는 프로그램을 만들어보자.

//============================================== 강사님 코드

//		long a = sc.nextInt();	// int인 경우 값이 그릇의 크기를 넘어가서 쓰레기값이 입력되기 때문에 long을 넣어 그릇의 크기를 키워준다.
//		int m = sc.nextInt();		
//    	int d = sc.nextInt();	  
//    	int n = sc.nextInt();
//    	
//    	for(int i = 0; i < n-1; i++) {
//    		System.out.println(a);
//    		a = a * m + d;
//    	}
//    	System.out.println(a);

// ==============================================

//		1, 2, 3 ... 을 순서대로 계속 더해나갈 때,
//		그 합이 입력한 정수보다 작을 동안만 계속 더하는 프로그램을 작성해보자.
//
//		즉, 1부터 n까지 정수를 계속 더한다고 할 때,
//		어디까지 더해야 입력한 수보다 같거나 커지는지 알아보고자 하는 문제이다.
//
//		하지만, 이번에는 그 때의 합을 출력해야 한다.
//
//		예를 들어 57을 입력하면
//		1+2+3+...+8+9+10=55에 다시 11을 더해 66이 될 때,
//		그 값 66이 출력되어야 한다.
//
//
//		참고
//		조건문이나 반복문의 코드블록 안에서 break;가 실행되면
//		가장 가까운 반복 코드블록 구역의 밖으로 빠져나간다.

//		int n = sc.nextInt();		
//		int sum = 0;		
//		for (int i = 1; i <= n; i++) {
//			sum += i;
//			if((sum) >= n) {
//				System.out.print((sum) + " "); 
//				break;
//			}
//		}
//		

// ==============================================

//		1, 2, 3 ... 을 계속 더해 나갈 때, 
//		그 합이 입력한 정수(0 ~ 1000)보다 같거나 작을 때까지
//		계속 더하는 프로그램을 작성해보자.
//
//		즉, 1부터 n까지 정수를 계속 더한다고 할 때,
//		어디까지 더해야 입력한 수보다 같거나 커지는지 알아보고자 하는 문제이다.
// 1 ~ 1000 까지의 숫자중 하나를 입력했을ㅐ
// n을 입력하면 어디까지 더해야 n을 넘어서거나 같나 //예시) 8을 입력하면 4까지만 더하면 나오도록

// ================================================ 강사님 코드
//		int n = sc.nextInt();		
//		int sum = 0;		
//		int i = 0;
//		
//		while(sum < n) { // 반복문을 "거짓"인 동안 돌아가게 한다 (생각을 틔우는 설명;)
//			i++;
//			sum += i;
//		}
//		System.out.println(i);

// ================================================ 밑은 내 코드
//		int n = sc.nextInt();		
//		int sum = 0;		
//		for (int i = 1; i <= n; i++) {
//			sum += i;
//			if(sum >= n) {
//				System.out.print(i + " ");
//				break;
//			}
//		}

// ==================================================초기 코드

//		int n = sc.nextInt();
//		int sum1 = 0;
//		for (int i = 1; i <= n; i++) {
//			if (sum1+i >= n) {
//				System.out.print(i + " ");
//			}
//			sum1 = sum1 + i;
//		}
//		System.out.print(sum1);
//		
//	} // end main()
//	
//} // end Main
//
//			int a = sc.nextInt();
//			int b = sc.nextInt();
//			int c = sc.nextInt();
//			
//			if (a <= b) { // a 가 가장 작을 경우
//				if (a <= c) {
//					if (b <= c) {
//						System.out.println(a + " " + b + " " + c); // a b c
//					} else {
//						System.out.println(a + " " + c + " " + b); // a c b
//					}
//				} else {
//					System.out.println(c + " " + a + " " + b); // c a b
//				}
//			} else if (b <= c) {
//				if (b <= a) {
//					if (a <= c) {
//						// b a c
//					} else {
//						// b c a
//					}
//				} else {
//					// a b c
//				}
//			} else if (c <= a) {
//				if (c <= b) {
//					if (b <= a) {
//						// c b a
//					} else {
//						// c a b
//					}
//				} else {
//					// b c a
//				}
//			}

// ==============================================================================

//			int first = 0;
//			int second = 0;
//			int third = 0;
//			// 변수 생성해 코드 정리 
//			
//			// && 사용한 코드
//			if (a <= b && a <= c) {
//				if (b <= c) {
//					first = a;
//					second = b;
//					third = c;
//				} else {
//					first = a;
//					second = c;
//					third = b;
//				}
//			} else if (b <= c && b <= a) {
//				if (a <= c) {
//					// b a c
//					first = b;
//					second = a;
//					third = c;
//				} else {
//					// b c a
//					first = b;
//					second = c;
//					third = a;
//				}
//			} else if (c <= a && c <= b) {
//				if (b <= a) {
//					// c b a
//					first = c;
//					second = b;
//					third = a;
//				} else {
//					// c a b
//					first = c;
//					second = a;
//					third = b;
//				}
//
//			}
//
//			System.out.println(first + " " + second + " " + third);
	} // end main()
} // end Main	
